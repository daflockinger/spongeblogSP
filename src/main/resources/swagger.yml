
swagger: '2.0'
info:
  description: Spongeblog blogging API
  version: 1.0.0
  title: SpongeblogSP API
  license:
    url: 'http://unlicense.org'
    name: open source
host: 'localhost:8081'
basePath: /
paths:
  /api/v1/blog:
    get:
      tags:
        - Blog
      summary: Get Blog
      description: Returns the Blog entry.
      operationId: apiV1BlogGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Blog.
          schema:
            $ref: '#/definitions/BlogDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Blog
      summary: Create Blog
      description: Creates new Blog entry.
      operationId: apiV1BlogPostUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: blogEdit
          description: blogEdit
          required: true
          schema:
            $ref: '#/definitions/BlogDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/BlogDTO'
        '201':
          description: Created Blog.
          schema:
            $ref: '#/definitions/BlogDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    put:
      tags:
        - Blog
      summary: Update Blog
      description: Updated a Blog entry.
      operationId: apiV1BlogPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: blogEdit
          description: blogEdit
          required: true
          schema:
            $ref: '#/definitions/BlogDTO'
      responses:
        '200':
          description: Blog updated.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    delete:
      tags:
        - Blog
      summary: Delete Blog
      description: Deletes existing Blog.
      operationId: apiV1BlogDeleteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Blog deleted.
          schema:
            type: object
        '204':
          description: No Content
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  /api/v1/blog/rewind:
    put:
      tags:
        - Blog
      summary: Rewind Blog
      description: Restores previous Blog entry.
      operationId: apiV1BlogRewindPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Previous Blog restored.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  /api/v1/categories:
    get:
      tags:
        - Categories
      summary: All Categorys
      description: Returns all Categorys.
      operationId: apiV1CategoriesGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Categories.
          schema:
            $ref: '#/definitions/CategoryDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Categories
      summary: Create Category
      description: Creates new Category entry.
      operationId: apiV1CategoriesPostUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: categoryEdit
          description: categoryEdit
          required: true
          schema:
            $ref: '#/definitions/CategoryDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/CategoryDTO'
        '201':
          description: Created Category.
          schema:
            $ref: '#/definitions/CategoryDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    put:
      tags:
        - Categories
      summary: Update Category
      description: Updated a Category entry.
      operationId: apiV1CategoriesPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: categoryEdit
          description: categoryEdit
          required: true
          schema:
            $ref: '#/definitions/CategoryDTO'
      responses:
        '200':
          description: Category updated.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/categories/children/{parentCategoryId}':
    get:
      tags:
        - Categories
      summary: Categorys of Parent.
      description: Returns all Categorys of defined parent Category.
      operationId: apiV1CategoriesChildrenParentCategoryIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: parentCategoryId
          in: path
          description: Unique identifier of the parent Category;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Categories.
          schema:
            $ref: '#/definitions/CategoryDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/categories/rewind/{categoryId}':
    put:
      tags:
        - Categories
      summary: Rewind Category
      description: Restores previous Category entry.
      operationId: apiV1CategoriesRewindCategoryIdPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of a Category;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: OK
          schema:
            type: object
        '201':
          description: Previous Category restored.
          schema:
            type: object
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/categories/{categoryId}':
    get:
      tags:
        - Categories
      summary: Get Category
      description: Fetches Category with defined Id.
      operationId: apiV1CategoriesCategoryIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of a Category;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Category with id.
          schema:
            $ref: '#/definitions/CategoryDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    delete:
      tags:
        - Categories
      summary: Delete Category
      description: Deletes a Category with defined Id.
      operationId: apiV1CategoriesCategoryIdDeleteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of a Category;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Category deleted.
          schema:
            type: object
        '204':
          description: No Content
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  /api/v1/posts:
    get:
      tags:
        - Posts
      summary: All posts
      description: Returns all posts (paginated).
      operationId: apiV1PostsGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Posts
      summary: Create Post
      description: Creates new Post entry.
      operationId: apiV1PostsPostUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: postEdit
          description: postEdit
          required: true
          schema:
            $ref: '#/definitions/PostDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PostDTO'
        '201':
          description: Created Post.
          schema:
            $ref: '#/definitions/PostDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    put:
      tags:
        - Posts
      summary: Update Post
      description: Updated a Post entry.
      operationId: apiV1PostsPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: postEdit
          description: postEdit
          required: true
          schema:
            $ref: '#/definitions/PostDTO'
      responses:
        '200':
          description: Post updated.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/posts/author/{userId}':
    get:
      tags:
        - Posts
      summary: Posts from User
      description: Returns all posts from defined User.
      operationId: apiV1PostsAuthorUserIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: Unique identifier of a User;
          required: true
          type: integer
          format: int64
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/posts/author/{userId}/{status}':
    get:
      tags:
        - Posts
      summary: Posts from User and Status
      description: Returns all posts from defined User and Status.
      operationId: apiV1PostsAuthorUserIdStatusGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: Unique identifier of a User;
          required: true
          type: integer
          format: int64
        - name: status
          in: path
          description: Post Status Id
          required: true
          type: string
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/posts/category/{categoryId}':
    get:
      tags:
        - Posts
      summary: Posts from Category
      description: Returns all posts from defined Category.
      operationId: apiV1PostsCategoryCategoryIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of a Category;
          required: true
          type: integer
          format: int64
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/posts/category/{categoryId}/{status}':
    get:
      tags:
        - Posts
      summary: Posts from Category and Status
      description: Returns all posts from defined Category and Status.
      operationId: apiV1PostsCategoryCategoryIdStatusGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: categoryId
          in: path
          description: Unique identifier of a Category;
          required: true
          type: integer
          format: int64
        - name: status
          in: path
          description: Post Status Id
          required: true
          type: string
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/posts/rewind/{postId}':
    put:
      tags:
        - Posts
      summary: Rewind Post
      description: Restores previous Post entry.
      operationId: apiV1PostsRewindPostIdPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: postId
          in: path
          description: Unique identifier of a Post;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Previous Post restored.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/posts/status/{status}':
    get:
      tags:
        - Posts
      summary: Posts with status
      description: Returns all posts with defined status.
      operationId: apiV1PostsStatusStatusGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: status
          in: path
          description: Post Status Id
          required: true
          type: string
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/posts/tag/{tagId}':
    get:
      tags:
        - Posts
      summary: Posts from Tag
      description: Returns all posts from defined Tag.
      operationId: apiV1PostsTagTagIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tagId
          in: path
          description: Unique identifier of a Tag;
          required: true
          type: integer
          format: int64
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            type: string
        '401':
          description: Untagized (need to log in / get token).
          schema:
            type: string
        '403':
          description: Forbidden (no rights to access resource).
          schema:
            type: string
        '404':
          description: Entity not found.
          schema:
            type: string
        '409':
          description: Request results in a conflict.
          schema:
            type: string
        '500':
          description: Internal Server Error.
          schema:
            type: string
  '/api/v1/posts/tag/{tagId}/{status}':
    get:
      tags:
        - Posts
      summary: Posts from Tag and Status
      description: Returns all posts from defined Tag and Status.
      operationId: apiV1PostsTagTagIdStatusGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tagId
          in: path
          description: Unique identifier of a Tag;
          required: true
          type: integer
          format: int64
        - name: status
          in: path
          description: Post Status Id
          required: true
          type: string
        - name: page
          in: query
          description: Page number from that on entities are returned.
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          description: Entities per page.
          required: false
          type: integer
          default: 5
          format: int32
      responses:
        '200':
          description: Post links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            type: string
        '401':
          description: Untagized (need to log in / get token).
          schema:
            type: string
        '403':
          description: Forbidden (no rights to access resource).
          schema:
            type: string
        '404':
          description: Entity not found.
          schema:
            type: string
        '409':
          description: Request results in a conflict.
          schema:
            type: string
        '500':
          description: Internal Server Error.
          schema:
            type: string
  '/api/v1/posts/{postId}':
    get:
      tags:
        - Posts
      summary: Get Post
      description: Fetches Post with defined Id.
      operationId: apiV1PostsPostIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: postId
          in: path
          description: Unique identifier of a Post;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Post with id.
          schema:
            $ref: '#/definitions/PostDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    delete:
      tags:
        - Posts
      summary: Delete Post
      description: Deletes a Post with defined Id.
      operationId: apiV1PostsPostIdDeleteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: postId
          in: path
          description: Unique identifier of a Post;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Post deleted.
          schema:
            type: object
        '204':
          description: No Content
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  /api/v1/pages:
    get:
      tags:
        - Pages
      summary: All pages.
      description: Returns all pages having no category assigned.
      operationId: apiV1PagesGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: without-category
          in: query
          description: Filter pages without a category.
          required: false
          type: boolean
          default: false
      responses:
        '200':
          description: Page links.
          schema:
            $ref: '#/definitions/PostsPage'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Pages
      summary: Create Page
      description: Creates new Page entry.
      operationId: apiV1PostsPageUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: pageEdit
          description: pageEdit
          required: true
          schema:
            $ref: '#/definitions/PostDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PostDTO'
        '201':
          description: Created Page.
          schema:
            $ref: '#/definitions/PostDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    put:
      tags:
        - Pages
      summary: Update Page
      description: Updated a Page entry.
      operationId: apiV1PagesPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: pageEdit
          description: pageEdit
          required: true
          schema:
            $ref: '#/definitions/PostDTO'
      responses:
        '200':
          description: Page updated.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/pages/{pageId}':
    get:
      tags:
        - Pages
      summary: Get Page
      description: Fetches Page with defined Id.
      operationId: apiV1PostsPageIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageId
          in: path
          description: Unique identifier of a Page;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Page with id.
          schema:
            $ref: '#/definitions/PostDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    delete:
      tags:
        - Pages
      summary: Delete Page
      description: Deletes a Page with defined Id.
      operationId: apiV1PostsPageIdDeleteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: pageId
          in: path
          description: Unique identifier of a Page;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Page deleted.
          schema:
            type: object
        '204':
          description: No Content
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  /api/v1/tags:
    get:
      tags:
        - Tags
      summary: All Tags
      description: Returns all Tags.
      operationId: apiV1TagsGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Tags.
          schema:
            $ref: '#/definitions/TagDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Tags
      summary: Create Tag
      description: Creates new Tag entry.
      operationId: apiV1TagsPostUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tagEdit
          description: tagEdit
          required: true
          schema:
            $ref: '#/definitions/TagDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/TagDTO'
        '201':
          description: Created Tag.
          schema:
            $ref: '#/definitions/TagDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    put:
      tags:
        - Tags
      summary: Update Tag
      description: Updated a Tag entry.
      operationId: apiV1TagsPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tagEdit
          description: tagEdit
          required: true
          schema:
            $ref: '#/definitions/TagDTO'
      responses:
        '200':
          description: Tag updated.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/tags/rewind/{tagId}':
    put:
      tags:
        - Tags
      summary: Rewind Tag
      description: Restores previous Tag entry.
      operationId: apiV1TagsRewindTagIdPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tagId
          in: path
          description: Unique identifier of a Tag;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Previous Tag restored.
          schema:
            type: object
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/tags/{tagId}':
    get:
      tags:
        - Tags
      summary: Get Tag
      description: Fetches Tag with defined Id.
      operationId: apiV1TagsTagIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tagId
          in: path
          description: Unique identifier of a Tag;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Tag with id.
          schema:
            $ref: '#/definitions/TagDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    delete:
      tags:
        - Tags
      summary: Delete Tag
      description: Deletes a Tag with defined Id.
      operationId: apiV1TagsTagIdDeleteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: tagId
          in: path
          description: Unique identifier of a Tag;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Tag deleted.
          schema:
            type: object
        '204':
          description: No Content
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  /api/v1/users:
    get:
      tags:
        - Users
      summary: All Users
      description: Returns all Users.
      operationId: apiV1UsersGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: Users.
          schema:
            $ref: '#/definitions/UserEditDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    post:
      tags:
        - Users
      summary: Create User
      description: Creates new User entry.
      operationId: apiV1UsersPostUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userEdit
          description: userEdit
          required: true
          schema:
            $ref: '#/definitions/UserEditDTO'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserEditDTO'
        '201':
          description: Created User.
          schema:
            $ref: '#/definitions/UserEditDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    put:
      tags:
        - Users
      summary: Update User
      description: Updated a User entry.
      operationId: apiV1UsersPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: userEdit
          description: userEdit
          required: true
          schema:
            $ref: '#/definitions/UserEditDTO'
      responses:
        '200':
          description: User updated.
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/users/info/{userId}':
    get:
      tags:
        - Users
      summary: Get User info
      description: Fetches User info with defined Id.
      operationId: apiV1UsersInfoUserIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: Unique identifier of a User;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: User info with id.
          schema:
            $ref: '#/definitions/UserInfoDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/users/rewind/{userId}':
    put:
      tags:
        - Users
      summary: Rewind User
      description: Restores previous User entry.
      operationId: apiV1UsersRewindUserIdPutUsingPUT
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: Unique identifier of a User;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: Previous User restored.
        '201':
          description: Created
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/users/{userId}':
    get:
      tags:
        - Users
      summary: Get User
      description: Fetches User with defined Id.
      operationId: apiV1UsersUserIdGetUsingGET
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: Unique identifier of a User;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: User with id.
          schema:
            $ref: '#/definitions/UserEditDTO'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
    delete:
      tags:
        - Users
      summary: Delete User
      description: Deletes a User with defined Id.
      operationId: apiV1UsersUserIdDeleteUsingDELETE
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userId
          in: path
          description: Unique identifier of a User;
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: User deleted.
        '204':
          description: No Content
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
  '/api/v1/users/name/{userName}':
    get:
      tags:
        - Users
      summary: Get User by login name
      description: Fetches User by login name.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: userName
          in: path
          description: Login name of the user.
          required: true
          type: string
      responses:
        '200':
          description: .
          schema:
            $ref: '#/definitions/BlogUserDetails'
        '400':
          description: Bad request (validation failed).
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized (need to log in / get token).
        '403':
          description: Forbidden (no rights to access resource).
        '404':
          description: Entity not found.
          schema:
            $ref: '#/definitions/Error'
        '409':
          description: Request results in a conflict.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Internal Server Error.
definitions:
  CategoryDTO:
    type: object
    properties:
      categoryId:
        type: integer
        format: int64
        description: Unique identifier.
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      pageId:
        type: integer
        format: int64
        description: ID of the assigned page if it's a page-category (optional field).
      name:
        type: string
        description: Category display name.
      parentId:
        type: integer
        format: int64
        description: Id of parent Category.
      children:
        type: array
        items:
          $ref: '#/definitions/CategoryDTO'
      rank:
        type: integer
        format: int32
        description: Determines position of Category.
  TagDTO:
    type: object
    properties:
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      name:
        type: string
        description: Tag name.
      tagId:
        type: integer
        format: int64
        description: Unique identifier.
  UserEditDTO:
    type: object
    properties:
      email:
        type: string
        description: Email of User.
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      login:
        type: string
        description: Login name of the User.
      nickName:
        type: string
        description: Display nickname of the User.
      password:
        type: string
        description: Password hash of the User.
      registered:
        type: string
        format: date-time
        description: Registration date of User in long.
      roles:
        type: array
        description: Roles of the User (authorizations).
        items:
          type: string
          enum:
            - ADMIN
            - AUTHOR
            - LOCKED
      userId:
        type: integer
        format: int64
        description: Unique identifier.
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      fields:
        type: object
        description: Invalid fields.
        additionalProperties:
          type: string
      message:
        type: string
  PostDTO:
    type: object
    properties:
      author:
        $ref: '#/definitions/UserInfoDTO'
      category:
        $ref: '#/definitions/CategoryDTO'
      content:
        type: string
        description: Post text/html content.
      created:
        type: string
        format: date-time
        description: Creation date of Post in long.
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      modified:
        type: string
        format: date-time
        description: Modification date of Post in long.
      postId:
        type: integer
        format: int64
        description: Unique identifier.
      status:
        type: string
        description: Display status of the Post.
        enum:
          - PUBLIC
          - PRIVATE
          - MAINTENANCE
          - DELETED
          - PAGE_PUBLIC
          - PAGE_INACTIVE
      tags:
        type: array
        description: Tags of Post.
        items:
          $ref: '#/definitions/TagDTO'
      title:
        type: string
        description: The title of the Blog post.
  PostsPage:
    type: object
    properties:
      previewPosts:
        type: array
        description: Preview posts
        items: 
          $ref: '#/definitions/PostPreviewDTO'
      hasNext:
        type: boolean
        description: Is a next page existing.
      hasPrevious:
        type: boolean
        description: Is a previous page existing.
      totalPages:
        type: integer
        description: Total count of pages.
  PostPreviewDTO:
    type: object
    properties:
      author:
        $ref: '#/definitions/UserInfoDTO'
      category:
        $ref: '#/definitions/CategoryDTO'
      partContent:
        type: string
        description: The first couple characters of the post content.
      created:
        type: string
        format: date-time
        description: Creation date of Post in long.
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      modified:
        type: string
        format: date-time
        description: Modification date of Post in long.
      postId:
        type: integer
        format: int64
        description: Unique identifier.
      status:
        type: string
        description: Display status of the Post.
        enum:
          - PUBLIC
          - PRIVATE
          - MAINTENANCE
          - DELETED
          - PAGE_PUBLIC
          - PAGE_INACTIVE
      tags:
        type: array
        description: Tags of Post.
        items:
          $ref: '#/definitions/TagDTO'
      title:
        type: string
        description: The title of the Blog post.
  UserInfoDTO:
    type: object
    properties:
      email:
        type: string
        description: Email of User.
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      nickName:
        type: string
        description: Display nickname of the User.
      registered:
        type: string
        format: date-time
        description: Registration date of User in long.
      userId:
        type: integer
        format: int64
        description: Unique identifier.
  Link:
    type: object
    properties:
      href:
        type: string
      rel:
        type: string
      templated:
        type: boolean
  BlogDTO:
    type: object
    properties:
      links:
        type: array
        items:
          $ref: '#/definitions/Link'
      name:
        type: string
        example: 'null'
        description: Name of the Blog.
      settings:
        type: object
        example: 'null'
        description: Settings map of the Blog.
        additionalProperties:
          type: string
      status:
        type: string
        example: 'null'
        description: Status of the Blog.
        enum:
          - ACTIVE
          - DISABLED
          - MAINTENANCE
  BlogUserDetails:
    type: object
    properties:
      userName:
        type: string
        description: Login name of the user.
      authorities:
        type: array
        items:
          $ref: '#/definitions/BlogAuthority'
  BlogAuthority: 
    type: object
    properties:
      authority:
        type: string
        description: Security group the user is in.